# New 360 optimal default settings
# ======================================================
# Miscellaneous configuration parameters for 360-images
# ======================================================

#: Dataeier
data_eier: null

#: Fylkesnummer/Kommunenummer
#: If the ExifWorker cannot find any other relevant
#: values for "exif_fylke" in the image's exif data,
#: The value of fylkesnummer will be used.
fylkesnummer: null

#: If True, the "exif_fylke"-field in the output .json-file will
#: be forced to have the "fylkesnummer"-value from above.
#: This will overwrite potential other values that "exif_fylke" may have
#: extracted from the exif data in the image.
force_fylke: False

#: The type of images to be processed
image_type: "360"

#: Apply the mask to the output image?
draw_mask: True

#: Delete the original image from the input directory when the masking is completed?
delete_input: False

#: Recompute masks even though a .webp file exists in the output folder.
force_remask: False

#: When `lazy_paths: True`, traverse the file tree during the masking process.
#: Otherwise, all paths will be identified and stored before the masking starts.
lazy_paths: False

#: Number of seconds to wait before (re)trying to access a file/directory which cannot currently be reached. This
#: applies to both reading input files, and writing output files.
file_access_retry_seconds: 10

#: Total number of seconds to wait before giving up on accessing a file/directory which cannot currently be reached.
#: This also applies to both reading input files, and writing output files.
file_access_timeout_seconds: 60

#: Timestamp format. See https://docs.python.org/3.7/library/datetime.html#strftime-strptime-behavior for more
#: information.
datetime_format: "%Y-%m-%d %H.%M.%S"

#: Name of the log file. `{datetime}` will be replaced with a timestamp formatted as `%Y-%m-%d_%H%M%S`. `{hostname}`
#: will be replaced with the host name.
log_file_name: "{datetime}_{hostname}.log"

#: Logging level for the application. This controls the log level for terminal logging and file logging (if it is
#: enabled). Must be one of {"DEBUG", "INFO", "WARNING", "ERROR"}.
log_level: "DEBUG"

#: Version number for the application. Will be written to json files and database.
application_version: "0.1"

#: Formatter for `mappenavn` in the JSON-file. `relative_input_dir` is the path to the folder containing the image,
#: relative to `exif_top_dir` below. For instance, if the image is located at `C:\Foo\Bar\Baz\Hello\World.jpg`, and
#: `exif_top_dir = Bar`, then `relative_input_dir` will be `Baz\Hello`.
exif_mappenavn: "Vegbilder/{relative_input_dir}"

#: Top directory for `relative_input_dir`. See above for an explanation.
exif_top_dir: "TilSladding"

#: If true, the image type of either 'planar', 'dekke' or '360 is removed
#: from the filepath in the 'mappenavn'-field in the .json-file.
#: This is relevant for images from 2021 and older.
#: E.g: 'Vegbilder\2021\Planar\EV00006\S1...' is converted to 'Vegbilder\2021\EV00006\S1...'
remove_imagetype_filepath: False

#: If True, the longitude and latitude values of the wkt gps string will flip their position
#: when reading the .json file to the database.
#: E.g: The wkt gps string a: srid=4326;POINT Z( 1.0 2.0 66.08 )
#: becomes wkt gps string b: srid=4326;POINT Z( 2.0 1.0 66.08 )
flip_wkt: False



# ===================
# File I/O parameters
# ===================

#: Write the EXIF .json file to the output (remote) directory?
remote_json: True

#: Write the EXIF .json file to the input (local) directory?
local_json: True

#: Write the EXIF .json file to the archive directory?
archive_json: False

#: Write mask file to the output (remote) directory?
#: Disabled to remove .webp
#: remote_mask: False

#: Write the mask file to the input (local) directory?
#: Disabled to remove .webp
#: local_mask: True

#: Write mask file to the archive directory?
#: Disabled to remove .webp
#: archive_mask: False

#: Make preview and output it to the *output* file path?
remote_preview: True

#: Make preview and output is to the "input" file path?
local_preview: False

#: Write mask file to the archive directory?
archive_preview: False

#: Save the preview to its own separate directory?
#: Should be an abosulte path to the directory.
#: E.g: "C:\\Users\\username\\Documents\\preview_dir"
#: Default: null
separate_preview_directory: null

#: The dimensions of the preview image
#: Format: [width, height]
#: Default values: [2520, 1400]
preview_dim: [2520, 1400]

#: The center of the preview in normalized.
#: E.g if the value is [0.5, 0.3], the center of the preview is
#: the pixel located at 50% of the height of the original image,
#: and 30% of the width.
#: Format: [height, width]
#: Default: [0.45, 0.5] (Slightly off center height, center width)
preview_center: [0.45, 0.5]

# =====================================
# Parameters for asynchronous execution
# =====================================

#: Enable asynchronous post-processing? When True, the file exports (anonymised image, mask file and JSON file) will be
#: executed asynchronously in order to increase processing speed.
enable_async: True

#: Maximum number of asynchronous workers allowed to be active simultaneously. Should be <= (CPU core count - 1)
max_num_async_workers: 2


# ================================
# Parameters for the masking model
# ================================

#: Type of masking model. Currently, there are three available models with varying speed and accuracy.
#: The slowest model produces the most accurate masks, while the masks from the medium model are slightly worse.
#: The masks from the "Fast" model are currently not recommended due to poor quality. Must be either "Slow", "Medium" or
#: "Fast". "Medium" is recommended.
#: Default: "Medium"
model_type: "Medium"

#: Approximate number of pixels for mask dilation. This will help ensure that an identified object is completely covered
#: by the corresponding mask. Set `mask_dilation_pixels: 0` to disable mask dilation.
#: Default: `4`
mask_dilation_pixels: 4

#: Maximum number of pixels in images to be processed by the masking model. If the number of pixels exceeds this value,
#: it will be resized before the masker is applied. This will NOT change the resolution of the output image.
max_num_pixels: 1000000000

#: Apply the cutuout 'sliding window' method.
#: Is recommended for larger images,
#: however, it will make the anonymisation process slower.
#: Default value: {True}
use_cutouts: True

#: How many steps the sliding window should move in directions [height, width]
#: The anonymisation will discover more anonymisation objects for lower values,
#: however, the payoff is a slower anonymisation process for each image.
#: Default: [1500, 1300]
cutout_step_factor: [1500,1300]

#: Downscale sliding window by [height, width]
cutout_dim_downscale: [3,2]

# ===============================================================
# Parameters controlling the appearance of the anonymised regions
# ===============================================================

#: "RGB tuple (0-255) indicating the masking color. Setting this option will override the
#: colors specified below. Example: Setting `mask_color: [50, 50, 50]` will make all masks
#: dark gray.
mask_color: null

#: Blurring coefficient (1-100) which specifies the degree of blurring to apply within the
#: mask. When this parameter is specified, the image will be blurred, and not masked with a
#: specific color. Set `blur: null` to disable blurring, and use colored masks instead.
#: Default: `15`
blur: 15

#: Convert the image to grayscale before blurring? (Ignored if blurring is disabled)
#: Default: `True`
gray_blur: True

#: Normalize the gray level within each mask after blurring? This will make bright colors indistinguishable from dark
#: colors. NOTE: Requires `gray_blur=True`
#: Default: True
normalized_gray_blur: True

# ====================
# E-mail configuration
# ====================
# Note: E-mail sending requires additional configuration. This is documented in the README.

#: Send an email if the program exits abnormally due to an uncaught exception.
uncaught_exception_email: True

#: Send an email if a processing error is encountered, but the program is able to continue
processing_error_email: True

#: Send an email when the anonymisation finishes normally.
finished_email: True

#: Attach the log file to emails?
email_attach_log_file: True


# ======================
# Database configuration
# ======================
# Note: Database writing requires additional configuration. This is documented in the README.

# When `write_exif_to_db: True`, the EXIF data will be written as a row to an Oracle database. The `src.db` module is
# responsible for the database writing.

#: Write the EXIF data to the database?
write_exif_to_db: True

#: Maximum number of rows to accumulate locally before writing all accumulated rows to the database.
db_max_n_accumulated_rows: 100

#: If the number of failed insertions/updates exceeds this number, a RuntimeError will be raised.
db_max_n_errors: 1000

#: If the number of cached rows exceeds this number, a RuntimeError will be raised.
db_max_cache_size: 1000

#: Config table name to check non nullable values against.
#: If this value is None, a nullable check is not run on the json-file.
table_name: "VEGBILDER_ADDED_FIELDS"

#: The exif tag used as the primary key in the database
#: If None, a special handling of primary keys is not done.
#: This configuration is necessary for the nullable check to avoid the two way dependency
#: between the exif_util and the formatter when a new ID is created
#: if the ID doesnt exist.
table_primary_key: "bildeid"
